type Cliente {
  id: ID
  nombre: String
  apellido: String
  empresa: String
  emails: [Email]
  edad: Int
  tipo: TipoCliente
  pedidos: [Pedido]
}

type Email {
  email: String
}

type Pedido {
  producto: String
  precio: Int
}

type Producto{
  id: ID
  nombre: String!
  precio: Float!
  stock: Int!
}

"""
Asigna la categoria del cliente
"""
enum TipoCliente {
  BASICO
  PREMIUM
}


input PedidoInput {
  producto: String
  precio: Int
}

input EmailInput {
  email: String
}

"""
Campos para los clientes nuevos
"""
input ClienteInput {
  id: ID
  nombre: String!
  apellido: String!
  empresa: String!
  emails: [EmailInput]
  edad: Int!
  tipo: TipoCliente!
  pedidos: [PedidoInput]
}

input ProductoInput{
  id: ID
  nombre: String!
  precio: Float!
  stock: Int!
}

""" Consultas de clientes a la base de datos """
type Query {
  """ Permite obtener todos lo registro o un registro especifico """
  getClientes(limite: Int, offset: Int) : [Cliente]
  """ Buscar un cliente en base a un ID """
  getCliente(id: ID): Cliente
  """" Count the record of request"""
  totalClientes: String
  #Productos
  obtenerProductos(limite: Int, offset: Int) : [Producto]
  obtenerProducto(id: ID!) : Producto
  totalProductos: String
}


"""
 Mutations para crear nuevos clientes
"""
type Mutation {
  #Nombre del Resolver, Input con Datos y valor que retorna
  """
   Te permite crear nuevos clientes
  """
  crearCliente(input: ClienteInput): Cliente
  """ Te permite actualizar los datos de los clientes """
  actualizarCliente(input: ClienteInput) : Cliente
  """ Te permite borrar los registros de los clientes """
  eliminarCliente(id: ID! ) : String
  #Productos
  nuevoProducto(input: ProductoInput) : Producto
  actualizarProducto(input: ProductoInput): Producto
  eliminarProducto(id: ID!) : String
}
